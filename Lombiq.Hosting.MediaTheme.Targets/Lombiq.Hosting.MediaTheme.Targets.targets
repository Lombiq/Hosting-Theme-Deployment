<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Empty target that can be used to hook into the build or to override it to change its dependencies. -->
  <Target Name="MediaThemeDeploymentBeforeTargets" BeforeTargets="BeforeBuild" />
  <Target Name="MediaThemeDeploymentAfterTargets" />

  <Target Name="CheckFile" BeforeTargets="MediaThemeDeploymentBeforeTargets" AfterTargets="MediaThemeDeploymentAfterTargets">
    <Error Condition="Exists('$(MSBuildThisFileDirectory)\.config\dotnet-tools.json')"
           Text="A dotnet-tools.json file should exists, read the documentation for more information." />
  </Target>

  <!-- The mutex is necessary to prevent concurrent dotnet tool restore calls throwing "The process cannot access the
  file" IOExceptions due to them trying to write the same NuGet cache file simultaneously. -->
  <UsingTask
    TaskName="MutexTask"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Action ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Threading" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          const string MutexName = "Global\\Lombiq.Hosting.MediaTheme.Targets";

          if (Action == "Acquire")
          {
              var mutex = new Mutex(initiallyOwned: false, MutexName);
              var acquired = mutex.WaitOne(TimeSpan.FromMinutes(3));

              if (!acquired)
              {
                  throw new InvalidOperationException($"Failed to acquire mutex '{MutexName}' within the specified timeout.");
              }

              BuildEngine4.RegisterTaskObject(
                  MutexName,
                  mutex,
                  RegisteredTaskObjectLifetime.Build,
                  allowEarlyCollection: false);
          }
          else if (Action == "Release" && BuildEngine4.GetRegisteredTaskObject(MutexName, RegisteredTaskObjectLifetime.Build) is Mutex mutex)
          {
              mutex.ReleaseMutex();
              mutex.Dispose();
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="RestoreDotnetTool" BeforeTargets="MediaThemeDeploymentBeforeTargets" AfterTargets="MediaThemeDeploymentAfterTargets">
    <MutexTask Action="Acquire" />
    <Exec Command="dotnet tool restore" />
    <MutexTask Action="Release" />
  </Target>

  <Target Name="DeleteTempMediaThemeFolderBefore" BeforeTargets="MediaThemeDeploymentBeforeTargets" AfterTargets="MediaThemeDeploymentAfterTargets">
    <Message Text="Deleting already existing $(DeploymentFolder) folder."/>
    <RemoveDir Directories="$(DeploymentFolder)"/>
  </Target>

  <Target Name="RunMediaThemeDeployer" BeforeTargets="MediaThemeDeploymentBeforeTargets" AfterTargets="MediaThemeDeploymentAfterTargets">
    <Exec Command="dotnet media-theme-deploy --path . --base-id $(MediaThemeBaseId) --clear true --deployment-path $(DeploymentFolder) --deployment-file-name $(MediaThemeRecipeFileName)"/>
  </Target>

  <Target Name="UnzipMediaTheme" BeforeTargets="MediaThemeDeploymentBeforeTargets" AfterTargets="MediaThemeDeploymentAfterTargets">
    <Unzip SourceFiles="$(DeploymentFolder)\$(MediaThemeRecipeFileName).zip"
           DestinationFolder="$(DeploymentFolder)" />
  </Target>

  <Target Name="MoveAndRenameRecipe" BeforeTargets="MediaThemeDeploymentBeforeTargets" AfterTargets="MediaThemeDeploymentAfterTargets">
    <Message Text="Moving Files $(RecipeToMove)"/>
    <Move SourceFiles="$(RecipeToMove)"
          OverwriteReadOnlyFiles="true"
          DestinationFiles="Recipes\$(MediaThemeRecipeFileName).recipe.json"/>
  </Target>

  <Target Name="CopyMediaThemeFiles" BeforeTargets="MediaThemeDeploymentBeforeTargets" AfterTargets="MediaThemeDeploymentAfterTargets">
    <ItemGroup>
      <MySourceFiles Include="Deployment\_MediaTheme\**\*.*"/>
    </ItemGroup>
    <Copy SourceFiles="@(MySourceFiles)"
          DestinationFiles="Recipes\_MediaTheme\%(RecursiveDir)%(Filename)%(Extension)"/>
  </Target>

  <Target Name="DeleteTempMediaThemeFolderAfter" BeforeTargets="MediaThemeDeploymentBeforeTargets" AfterTargets="MediaThemeDeploymentAfterTargets">
    <Message Text="Deleting leftover $(DeploymentFolder) folder."/>
    <RemoveDir Directories="$(DeploymentFolder)"/>
  </Target>
</Project>
